@*
*通用头部导航组件
*@
@inject NavigationManager _navigation
@inject IJSRuntime JS
<nav id="NavTitle" @ref="ElmNavTitle">
    <div class="t-nav-box" style="@Style">
        <div class="t-title" style="display: @(HasTitle?"flex":"none")">
            @if (Back == null)
            {
                <span class="t-back" @onclick="@(() => JS.InvokeAsync<string>("goBack"))">
                    <i class="fa fa-angle-left fa-2x"></i>
                </span>
            }
            else
            {
                @Back
            }
            <div class="t-text">@Title</div>
            <div class="t-right" style="margin-right: 10px;" @onclick="OnRightClick">
                @if (!string.IsNullOrEmpty(RightIcon))
                {
                    
                }
                else
                {
                    @Right
                }
                
            </div>
        </div>
        <div class="t-slot" @ref="EleSlot">
            @Slot
        </div>
    </div>
</nav>
@code {

    [Parameter]
    public string Style { set; get; } = "";
    [Parameter]
    public RenderFragment Back { set; get; } = null;
    // 是否需要标题
    [Parameter]
    public bool HasTitle { set; get; } = true;
    // 标题
    [Parameter]
    public string? Title { set; get; }
    // 标题
    [Parameter]
    public string? RightIcon { set; get; }
    // 标题下的嵌套
    [Parameter]
    public RenderFragment? Slot { get; set; }
    // 标题右侧的插槽
    [Parameter]
    public RenderFragment? Right { get; set; } = @<template><div>123</div></template>;
    // slot element 元素
    private ElementReference EleSlot { set; get; }
    // 最外层元素
    private ElementReference ElmNavTitle { set; get; }
    // slot的 高度
    private int SlotHeight { set; get; }
    protected override async void OnAfterRender(bool firstRender)
    {
        await JS.InvokeVoidAsync("getHeight",EleSlot,ElmNavTitle);
    }
    [Parameter] public EventCallback OnRightClick { set; get; }
}